name: Lint and Format

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-lint-
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all --check
        
      - name: Run Clippy (all warnings as errors)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for common Rust issues
        run: |
          # Check for TODO/FIXME comments that should be tracked
          echo "Checking for untracked TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" src/ --exclude-dir=target || true; then
            echo "Found TODO/FIXME comments - consider tracking them in issues"
          fi

      - name: Check dependencies for security advisories
        run: |
          cargo install cargo-audit || true
          cargo audit || echo "No security advisories found or cargo-audit not available"

      - name: Verify documentation builds
        run: cargo doc --no-deps --document-private-items

      - name: Check for unused dependencies
        run: |
          cargo install cargo-machete || true
          cargo machete || echo "No unused dependencies found or cargo-machete not available"

  format-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check Rust formatting
        run: cargo fmt --all --check

      - name: Check for trailing whitespace
        run: |
          echo "Checking for trailing whitespace..."
          if grep -r '[[:space:]]$' src/ --exclude-dir=target; then
            echo "Found trailing whitespace!"
            exit 1
          else
            echo "No trailing whitespace found"
          fi

      - name: Check for mixed line endings
        run: |
          echo "Checking for mixed line endings..."
          # Check that all Rust files are valid text files (ASCII is valid UTF-8)
          # Note: file command might detect some files as "C source, ASCII text" which is fine
          if file src/*.rs | grep -E -v '(ASCII text|UTF-8 Unicode text|Unicode text, UTF-8 text|C source, ASCII text)$'; then
            echo "Found non-text files or binary content!"
            file src/*.rs
            exit 1
          else
            echo "All files are valid text files"
          fi
          
          # Check for Windows line endings (CRLF)
          if grep -l $'\r$' src/*.rs 2>/dev/null; then
            echo "Found Windows line endings (CRLF) in Rust files!"
            exit 1
          else
            echo "All files use Unix line endings (LF)"
          fi

  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install aspell
        run: sudo apt-get update && sudo apt-get install -y aspell aspell-en

      - name: Check spelling in comments and documentation
        run: |
          echo "Checking spelling in Rust comments..."
          # Extract comments from Rust files and check spelling
          find src/ -name "*.rs" -exec grep -h '//\|/\*\|\*' {} \; | \
          # Remove comment markers and check spelling
          sed 's|^[[:space:]]*//[[:space:]]*||g' | \
          sed 's|^[[:space:]]*\*[[:space:]]*||g' | \
          sed 's|/\*||g' | sed 's|\*/||g' | \
          # Filter out code-like content
          grep -v '^\s*$' | \
          aspell list --lang=en_US --mode=html | \
          sort -u > potential_typos.txt || true
          
          if [ -s potential_typos.txt ]; then
            echo "Potential spelling issues found in comments:"
            cat potential_typos.txt
            echo "Please review these potential typos in code comments"
            # Don't fail the build for spelling issues, just warn
          else
            echo "No spelling issues found in comments"
          fi

      - name: Check spelling in documentation
        run: |
          echo "Checking spelling in Markdown files..."
          find . -name "*.md" -not -path "./target/*" | \
          xargs cat | \
          aspell list --lang=en_US --mode=html | \
          sort -u > doc_typos.txt || true
          
          if [ -s doc_typos.txt ]; then
            echo "Potential spelling issues found in documentation:"
            cat doc_typos.txt
            echo "Please review these potential typos in documentation"
            # Don't fail the build for spelling issues, just warn
          else
            echo "No spelling issues found in documentation"
          fi

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-security-
            ${{ runner.os }}-cargo-

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          # Look for common secret patterns
          if grep -r -i "password\|secret\|token\|key" src/ --include="*.rs" | \
             grep -v "// " | grep -v "/\*" | grep -v "\*/" | \
             grep -E "(=|:)[[:space:]]*[\"'][^\"']{8,}[\"']"; then
            echo "WARNING: Found potential hardcoded secrets!"
            echo "Please ensure no real secrets are committed to the repository"
            # Don't fail the build, just warn
          else
            echo "No obvious hardcoded secrets found"
          fi

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-utils genisoimage iptables jq

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate code coverage
        run: |
          cargo tarpaulin --out xml --output-dir ./coverage --skip-clean || echo "Coverage generation failed"

      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/cobertura.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, format-check, spell-check, security]
    if: always()
    steps:
      - name: Quality Check Summary
        run: |
          echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Formatting | ${{ needs.format-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Spell Check | ${{ needs.spell-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint.result }}" == "failure" || "${{ needs.format-check.result }}" == "failure" ]]; then
            echo "❌ Code quality checks failed. Please fix the issues above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All critical code quality checks passed!" >> $GITHUB_STEP_SUMMARY
          fi