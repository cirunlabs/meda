name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install qemu-utils genisoimage iptables jq -y
        sudo apt-get install sshpass
    - name: Give the runner user rw access to /dev/kvm
      run: sudo setfacl -m u:${USER}:rw /dev/kvm
    - name: List VMs
      run: RUST_LOG=info cargo run -- list
    - name: Create VM
      run: |
        RUST_LOG=info cargo run -- create ubuntu
        sleep 10
    - name: SSH into the VM with retries and collect system information
      run: |
        ip=$(target/debug/meda list --json | jq -r '.[0].ip')
        echo "Connecting to IP: $ip"
        
        max_retries=10
        delay=3
        success=0
        
        # Define SSH function to avoid repetition
        ssh_execute() {
          local cmd="$1"
          echo "Executing: $cmd"
          sshpass -p 'cirun' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 cirun@$ip "$cmd"
          return $?
        }
        
        # Try to establish connection
        for i in $(seq 1 $max_retries); do
          echo "Attempt $i to SSH into $ip..."
          if ssh_execute "echo 'SSH successful'"; then
            success=1
            break
          fi
          echo "SSH attempt $i failed, retrying in $delay seconds..."
          sleep $delay
        done
        
        if [ $success -ne 1 ]; then
          echo "SSH failed after $max_retries attempts"
          exit 1
        fi
        
        # Once connected successfully, collect system information
        echo "==== SYSTEM INFORMATION COLLECTION ===="
        
        echo -e "\n==== SYSTEM OVERVIEW ===="
        ssh_execute "hostnamectl"
        ssh_execute "uname -a"
        ssh_execute "cat /etc/os-release"
        
        echo -e "\n==== CPU INFORMATION ===="
        ssh_execute "lscpu"
        ssh_execute "cat /proc/cpuinfo | grep 'model name' | head -1"
        ssh_execute "nproc --all"
        
        echo -e "\n==== MEMORY INFORMATION ===="
        ssh_execute "free -h"
        ssh_execute "cat /proc/meminfo | grep -E 'MemTotal|MemFree|MemAvailable'"
        
        echo -e "\n==== STORAGE INFORMATION ===="
        ssh_execute "df -h"
        ssh_execute "lsblk"
        ssh_execute "mount | grep '^/dev'"
        
        echo -e "\n==== NETWORK INFORMATION ===="
        ssh_execute "ip addr"
        ssh_execute "ip route"
        ssh_execute "netstat -tuln"
        ssh_execute "cat /etc/hosts"
        ssh_execute "cat /etc/resolv.conf"
        
        echo -e "\n==== LOAD & RUNNING PROCESSES ===="
        ssh_execute "uptime"
        ssh_execute "ps aux | sort -rk 3,3 | head -10"
        ssh_execute "systemctl list-units --type=service --state=running"
        
        echo -e "\n==== ENVIRONMENT VARIABLES ===="
        ssh_execute "env | sort"
        
        echo -e "\n==== USER INFORMATION ===="
        ssh_execute "who"
        ssh_execute "id"
        
        echo -e "\n==== GPU INFORMATION (IF AVAILABLE) ===="
        ssh_execute "lspci | grep -i 'vga\|3d\|2d'"
        ssh_execute "command -v nvidia-smi && nvidia-smi || echo 'nvidia-smi not available'"
        
        echo -e "\n==== CONTAINER INFO (IF AVAILABLE) ===="
        ssh_execute "command -v docker && docker ps -a || echo 'docker not available'"
        
        echo "System information collection complete."

    - name: Cloud Hypervisor logs
      if: always()
      run: cat /home/runner/.ch-vms/vms/ubuntu/ch.log
    - name: List VM
      run: RUST_LOG=info cargo run -- list
    - name: Get VM
      run: RUST_LOG=info cargo run -- get ubuntu
    - name: Stop VM
      run: |
        sudo setfacl -m u:${USER}:rw /dev/kvm
        RUST_LOG=info cargo run -- stop ubuntu
    - name: Start VM
      run: |
        sudo setfacl -m u:${USER}:rw /dev/kvm
        RUST_LOG=info cargo run -- start ubuntu
    - name: Delete VM
      run: |
        sudo setfacl -m u:${USER}:rw /dev/kvm
        RUST_LOG=info cargo run -- delete ubuntu
